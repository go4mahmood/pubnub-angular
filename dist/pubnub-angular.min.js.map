{"version":3,"sources":["webpack:///webpack/bootstrap c2dd1b48de4ee5c0f885","webpack:///./src/index.js","webpack:///./src/vendor/polyfill.js","webpack:///./src/pubnub.js","webpack:///./config.common.json","webpack:///./src/wrapper.js","webpack:///./src/v3/wrapper_pubnub_v3.js","webpack:///./src/v3/mock_v3.js","webpack:///./src/mock.js","webpack:///./src/v3/config.pubnub-v3.json","webpack:///./src/v4/wrapper_pubnub_v4.js","webpack:///./src/v4/mock_v4.js","webpack:///./src/v4/subscribe_events_broadcaster.js","webpack:///./src/v4/config.pubnub-v4.json","webpack:///./src/pubnub_channel.js","webpack:///./src/pubnub_channel_group.js"],"names":["require","Object","create","Temp","prototype","arguments","length","Error","TypeError","result","Array","map","callback","thisArg","T","A","k","O","len","kValue","mappedValue","call","commonConfig","Wrapper","WrapperPubNubV3","WrapperPubNubV4","angular","module","factory","$rootScope","PUBNUB","PubNub","service","instances","getPubNubVersion","init","initConfig","getInstance","default_instance_name","instanceName","instance","isDefined","getEventNameFor","methodName","callbackName","pubnub_prefix","join","getMessageEventNameFor","channelName","getPresenceEventNameFor","subscribe","args","config","exports","label","wrapperConfig","mockingInstance","pubnubInstance","methods_to_wrap","forEach","method","isObject","methodGroup","keys","methodList","m","wrapMethod","callbackFunction","methods_to_delegate","getOriginalInstance","arg1","arg2","arg3","ReferenceError","MockV3","configPubNubV3","callbacks","getCallbacksToMock","subscribe_callbacks_to_wrap","mockCallbacks","getLabel","common_callbacks_to_wrap","Mock","originalCallback","methodArguments","channel","channel_group","$broadcast","bind","concat","slice","isFunction","callbacksList","currentCallbackName","l","i","generateMockedVersionOfCallback","argsValue","initialCallbackNames","triggerEventsValue","triggerEvents","value","indexOf","push","MockV4","SubscribeEventsBroadcaster","configPubNubV4","subscribeEventsBroadcaster","eventsToBroadcast","subscribe_listener_events_to_broadcast","enableEventsBroadcast","undefined","eventName","wrapper","broadcastStatus","broadcastedChannels","broadcastedPresenceChannels","subscribeListener","self","addListener","message","subscription","apply","subscribedChannel","presence","presenceChannel","status","triggers","eventToBroadcast","includes","channels","channelGroups","channelGroup","withPresence","initializeSubscribeListener","pubnubConfig","Pubnub","$q","PubnubChannel","autosubscribe","autostore","_channel","$messages","_timeTokenFirstMessage","_messagesAllFetched","_pubnubInstance","_autoload","autoload","_presence","_autosubscribe","_autostore","$$getPublicMethods","fn","key","_unsubscribeHandler","$load","eventsToTrigger","noheresync","$on","$$newMessage","numberOfMessages","deferred","defer","count","reverse","$$storeBatch","resolve","$digest","error","err","reject","response","startTimeToken","messages","item","entry","start","history","promise","$publish","_message","options","publish","$pubnubInstance","$channel","$allLoaded","$destroy","ngEvent","$$store","extend","unshift","iterator","context","$$getPrototypeMethods","charAt","methods","objProto","getPrototypeOf","proto","hasOwnProperty","$extend","ExtendedPubnubChannel","$pubnubChannel","PubnubChannelGroup","_config","channelExtension","_channelGroup","$channels","_extendedChannel","newChannel","$channelGroup","env"],"mappings":"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","file":"pubnub-angular.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c2dd1b48de4ee5c0f885","require('./vendor/polyfill.js');\r\nrequire('./pubnub.js');\r\nrequire('./pubnub_channel.js');\r\nrequire('./pubnub_channel_group.js');\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/* eslint-disable */\r\n/* istanbul ignore next */\r\n// Object.create(proto[, propertiesObject])\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\r\nif (typeof Object.create !== 'function') {\r\n  Object.create = (function () {\r\n    let Temp = function () {};\r\n    return function (prototype) {\r\n      if (arguments.length > 1) {\r\n        throw new Error('Second argument not supported');\r\n      }\r\n      if (prototype !== Object(prototype) && prototype !== null) {\r\n        throw new TypeError('Argument must be an object or null');\r\n      }\r\n      if (prototype === null) {\r\n        throw Error('null [[Prototype]] not supported');\r\n      }\r\n      Temp.prototype = prototype;\r\n      let result = new Temp();\r\n      Temp.prototype = null;\r\n      return result;\r\n    };\r\n  })();\r\n}\r\n/* istanbul ignore next */\r\n// Production steps of ECMA-262, Edition 5, 15.4.4.19\r\n// Reference: http://es5.github.io/#x15.4.4.19\r\nif (!Array.prototype.map) {\r\n  Array.prototype.map = function(callback, thisArg) {\r\n    var T, A, k;\r\n    if (this == null) {\r\n      throw new TypeError(' this is null or not defined');\r\n    }\r\n    // 1. Let O be the result of calling ToObject passing the |this| \r\n    //    value as the argument.\r\n    var O = Object(this);\r\n    // 2. Let lenValue be the result of calling the Get internal \r\n    //    method of O with the argument \"length\".\r\n    // 3. Let len be ToUint32(lenValue).\r\n    var len = O.length >>> 0;\r\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.\r\n    // See: http://es5.github.com/#x9.11\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError(callback + ' is not a function');\r\n    }\r\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n    if (arguments.length > 1) {\r\n      T = thisArg;\r\n    }\r\n    // 6. Let A be a new array created as if by the expression new Array(len) \r\n    //    where Array is the standard built-in constructor with that name and \r\n    //    len is the value of len.\r\n    A = new Array(len);\r\n    // 7. Let k be 0\r\n    k = 0;\r\n    // 8. Repeat, while k < len\r\n    while (k < len) {\r\n      var kValue, mappedValue;\r\n      // a. Let Pk be ToString(k).\r\n      //   This is implicit for LHS operands of the in operator\r\n      // b. Let kPresent be the result of calling the HasProperty internal \r\n      //    method of O with argument Pk.\r\n      //   This step can be combined with c\r\n      // c. If kPresent is true, then\r\n      if (k in O) {\r\n        // i. Let kValue be the result of calling the Get internal \r\n        //    method of O with argument Pk.\r\n        kValue = O[k];\r\n        // ii. Let mappedValue be the result of calling the Call internal \r\n        //     method of callback with T as the this value and argument \r\n        //     list containing kValue, k, and O.\r\n        mappedValue = callback.call(T, kValue, k, O);\r\n        // iii. Call the DefineOwnProperty internal method of A with arguments\r\n        // Pk, Property Descriptor\r\n        // { Value: mappedValue,\r\n        //   Writable: true,\r\n        //   Enumerable: true,\r\n        //   Configurable: true },\r\n        // and false.\r\n        // In browsers that support Object.defineProperty, use the following:\r\n        // Object.defineProperty(A, k, {\r\n        //   value: mappedValue,\r\n        //   writable: true,\r\n        //   enumerable: true,\r\n        //   configurable: true\r\n        // });\r\n        // For best browser support, use the following:\r\n        A[k] = mappedValue;\r\n      }\r\n      // d. Increase k by 1.\r\n      k++;\r\n    }\r\n    // 9. return A\r\n    return A;\r\n  };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/polyfill.js","/* global angular PUBNUB */\r\n/* global angular PubNub */\r\n\r\nconst commonConfig = require('../config.common.json');\r\n\r\nlet Wrapper = require('./wrapper.js');\r\nlet WrapperPubNubV3 = require('./v3/wrapper_pubnub_v3.js');\r\nlet WrapperPubNubV4 = require('./v4/wrapper_pubnub_v4.js');\r\n\r\nangular.module('pubnub.angular.service', [])\r\n  .factory('Pubnub', ['$rootScope', function ($rootScope) {\r\n    if (typeof PUBNUB === 'undefined' && typeof PubNub === 'undefined') {\r\n      throw new Error('PUBNUB is not in global scope. Ensure that pubnub.js file is included before pubnub-angular.js');\r\n    }\r\n\r\n    let service = {};\r\n    let instances = {};\r\n    /**\r\n     * Return the version of PubNub used by the PubNub service.\r\n     *\r\n     * @param {Object} initConfig\r\n     */\r\n    service.getPubNubVersion = function () {\r\n      return (typeof PUBNUB === 'undefined') ? '4' : '3';\r\n    };\r\n\r\n    /**\r\n     * Initializer for default instance\r\n     *\r\n     * @param {Object} initConfig\r\n     */\r\n    service.init = function (initConfig) {\r\n      return service.getInstance(commonConfig.default_instance_name).init(initConfig);\r\n    };\r\n\r\n    /**\r\n     * Instance getter\r\n     *\r\n     * @param instanceName\r\n     * @returns {Wrapper}\r\n     */\r\n    service.getInstance = function (instanceName) {\r\n      let instance = instances[instanceName];\r\n\r\n      if (angular.isDefined(instance) && instance instanceof Wrapper) {\r\n        return instance;\r\n      } else if (typeof instanceName === 'string' && instanceName.length > 0) {\r\n        if (this.getPubNubVersion() === '3') {\r\n          instances[instanceName] = new WrapperPubNubV3(instanceName, service, $rootScope);\r\n        } else if (this.getPubNubVersion() === '4') {\r\n          instances[instanceName] = new WrapperPubNubV4(instanceName, service, $rootScope);\r\n        }\r\n\r\n        return instances[instanceName];\r\n      }\r\n\r\n      return instance;\r\n    };\r\n\r\n    /**\r\n     * Generate unique method/callback event name\r\n     *\r\n     * @param {string} methodName\r\n     * @param {string} callbackName\r\n     * @param {string} instanceName\r\n     * @returns {string} event name\r\n     */\r\n    service.getEventNameFor = function (methodName, callbackName, instanceName = commonConfig.default_instance_name) {\r\n      return [commonConfig.pubnub_prefix, instanceName, methodName, callbackName].join(':');\r\n    };\r\n\r\n    /**\r\n     * Generate unique message event name for specified channel\r\n     *\r\n     * @param {string} channelName\r\n     * @param {string} instanceName\r\n     * @returns {string} event name\r\n     */\r\n    service.getMessageEventNameFor = function (channelName, instanceName = commonConfig.default_instance_name) {\r\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'callback', channelName].join(':');\r\n    };\r\n\r\n    /**\r\n     * Generate unique presence event name for specified channel\r\n     *\r\n     * @param {string} channelName\r\n     * @param {string} instanceName\r\n     * @returns {string} event name\r\n     */\r\n    service.getPresenceEventNameFor = function (channelName, instanceName = commonConfig.default_instance_name) {\r\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'presence', channelName].join(':');\r\n    };\r\n\r\n    /**\r\n     * Subscribe method wrapper for default instance\r\n     *\r\n     * @param {object} args\r\n     */\r\n    service.subscribe = function (args) {\r\n      this.getInstance(commonConfig.default_instance_name).subscribe(args);\r\n    };\r\n\r\n    return service;\r\n  }]);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub.js","module.exports = {\"pubnub_prefix\":\"pubnub\",\"default_instance_name\":\"default\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./config.common.json\n// module id = 3\n// module chunks = 0","/* global angular */\r\n/* eslint no-param-reassign: 0 */\r\nconst config = require('../config.common.json');\r\n\r\nmodule.exports = class {\r\n  /**\r\n  * Constructor\r\n  * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\r\n  * @param {String} label: instance name\r\n  * @param {Hash} service: PubNub Angular service composed of functions\r\n  * @param {$rootScope} $rootScope : the $rootScope of the PubNub Angular service\r\n  * @param {Hash} $rootScope : the $rootScope of the PubNub Angular service\r\n  * @constructor\r\n  */\r\n  constructor(label, service, $rootScope, wrapperConfig) {\r\n    this.label = label;\r\n    this.mockingInstance = null;\r\n    this.pubnubInstance = null;\r\n    // Register the methods in the wrapper and replace callbacks by mocked callbacks if needed\r\n    wrapperConfig.methods_to_wrap.forEach((method) => {\r\n      if (angular.isObject(method)) {\r\n        let methodGroup = Object.keys(method)[0];\r\n        let methodList = method[methodGroup];\r\n        this[methodGroup] = {};\r\n        service[methodGroup] = {};\r\n        methodList.forEach((m) => {\r\n          this.wrapMethod(m, methodGroup);\r\n          service[methodGroup][m] = function (args, callbackFunction) {\r\n            return service.getInstance(config.default_instance_name)[methodGroup][m](args, callbackFunction);\r\n          };\r\n        });\r\n      } else {\r\n        this.wrapMethod(method);\r\n        // Add the wrapped method to the service\r\n        service[method] = function (args, callbackFunction) {\r\n          return service.getInstance(config.default_instance_name)[method](args, callbackFunction);\r\n        };\r\n      }\r\n    });\r\n\r\n    // Just delegate the methods to the wrapper\r\n    wrapperConfig.methods_to_delegate.forEach((method) => {\r\n        this[method] = args => this.getOriginalInstance()[method](args);\r\n        this[method] = (arg1, arg2) => this.getOriginalInstance()[method](arg1, arg2);\r\n        this[method] = (arg1, arg2, arg3) => this.getOriginalInstance()[method](arg1, arg2, arg3);\r\n\r\n      // Add the delegated method to the service\r\n        service[method] = function (args) {\r\n            return service.getInstance(config.default_instance_name)[method](args);\r\n        };\r\n        service[method] = function (arg1, arg2) {\r\n            return service.getInstance(config.default_instance_name)[method](arg1, arg2);\r\n        };\r\n        service[method] = function (arg1, arg2, arg3) {\r\n            return service.getInstance(config.default_instance_name)[method](arg1, arg2, arg3);\r\n        };\r\n    });\r\n  }\r\n\r\n  /**\r\n  * This method returns the label of the wrapper which is the name of the instance.\r\n  **/\r\n  getLabel() {\r\n    return this.label;\r\n  }\r\n\r\n  /**\r\n  * This method returns the original PubNub instance associated with this wrapper\r\n  **/\r\n  getOriginalInstance() {\r\n    if (this.pubnubInstance) {\r\n      return this.pubnubInstance;\r\n    } else {\r\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\r\n    }\r\n  }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/wrapper.js","/* global angular PUBNUB */\r\n\r\nlet Wrapper = require('../wrapper.js');\r\nlet MockV3 = require('./mock_v3.js');\r\nconst configPubNubV3 = require('./config.pubnub-v3.json');\r\n\r\nmodule.exports = class extends Wrapper {\r\n\r\n  constructor(label, service, $rootScope) {\r\n    super(label, service, $rootScope, configPubNubV3);\r\n    this.mockingInstance = new MockV3(label, service, $rootScope);\r\n  }\r\n\r\n  init(initConfig) {\r\n    this.pubnubInstance = new PUBNUB(initConfig);\r\n  }\r\n\r\n  subscribe(args) {\r\n    let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.subscribe_callbacks_to_wrap);\r\n    this.mockingInstance.mockCallbacks(this.getLabel(), 'subscribe', args, callbacks);\r\n    this.getOriginalInstance().subscribe(args);\r\n  }\r\n\r\n  /**\r\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\r\n  **/\r\n  wrapMethod(methodName) {\r\n    this[methodName] = (args) => {\r\n      if (angular.isObject(args)) {\r\n        let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.common_callbacks_to_wrap);\r\n        this.mockingInstance.mockCallbacks(this.getLabel(), methodName, args, callbacks);\r\n      }\r\n\r\n      return this.getOriginalInstance()[methodName](args);\r\n    };\r\n  }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/v3/wrapper_pubnub_v3.js","/* global angular */\r\n/* eslint no-param-reassign: 0 */\r\nlet Mock = require('../mock');\r\n\r\nmodule.exports = class extends Mock {\r\n\r\n  /**\r\n   * Returns a mocked version of the given callback broadcasting the callback through\r\n   * the AngularJS event broadcasting mechanism.\r\n   *\r\n   * @param {function} originalCallback\r\n   * @param {string} callbackName\r\n   * @param {string} methodName\r\n   * @param {string} instanceName\r\n   * @param {string} methodArguments: the arguments of the method that setup the callback\r\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\r\n   */\r\n\r\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName, methodArguments) {\r\n    let $rootScope = this.$rootScope;\r\n    let service = this.service;\r\n    const channelName = methodArguments.channel || methodArguments.channel_group;\r\n\r\n    return function () {\r\n      // Broadcast through the generic event name\r\n      $rootScope.$broadcast.bind(...[$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\r\n                                    .concat(Array.prototype.slice.call(arguments))\r\n                                )();\r\n\r\n        // Call the original callback\r\n      if (callbackName && angular.isFunction(originalCallback)) {\r\n        originalCallback(...arguments);\r\n      }\r\n\r\n        // Broadcast through the message event or presence event\r\n      if (methodName === 'subscribe') {\r\n        switch (callbackName) {\r\n          case 'callback':\r\n            $rootScope.$broadcast.bind(...[$rootScope, service.getMessageEventNameFor(channelName, instanceName)]\r\n                                          .concat(Array.prototype.slice.call(arguments))\r\n                                      )();\r\n            break;\r\n          case 'presence':\r\n            $rootScope.$broadcast.bind(...[$rootScope, service.getPresenceEventNameFor(channelName, instanceName)]\r\n                                          .concat(Array.prototype.slice.call(arguments))\r\n                                       )();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Mock passed in callbacks with callback-wrappers to invoke both original callbacks and angular events\r\n   *\r\n   * This method is replacing from the list of arguments {{args}} the callbacks functions\r\n   * allowed and enabled to be mocked provided by the {{callbackList}} by new callbacks functions\r\n   * including the Angular event broadcasting\r\n   *\r\n   * @param {string} instanceName\r\n   * @param {string} methodName\r\n   * @param {Object} methodArguments : argument list of the function\r\n   * @param {Array} callbacksList : list of callbacks functions to be mocked\r\n   */\r\n  mockCallbacks(instanceName, methodName, methodArguments, callbacksList) {\r\n    let originalCallback;\r\n    let currentCallbackName;\r\n\r\n    let l = callbacksList.length;\r\n    let i;\r\n\r\n    // Replace each callbacks allowed to be mocked.\r\n    for (i = 0; i < l; i += 1) {\r\n      if (!angular.isObject(methodArguments)) {\r\n        return;\r\n      }\r\n\r\n      currentCallbackName = callbacksList[i];\r\n      originalCallback = methodArguments[currentCallbackName];\r\n\r\n      // We replace the original callback with a mocked version.\r\n      methodArguments[currentCallbackName] = this.generateMockedVersionOfCallback(originalCallback, currentCallbackName, methodName, instanceName, methodArguments);\r\n    }\r\n  }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/v3/mock_v3.js","/* global angular */\r\nmodule.exports = class {\r\n\r\n  constructor(label, service, $rootScope) {\r\n    this.label = label;\r\n    this.$rootScope = $rootScope;\r\n    this.service = service;\r\n  }\r\n\r\n  /**\r\n   * Return the list of callbacks names allowed and enabled to be mocked.\r\n   *\r\n   * This methods given a list of callbacks names {{initialCallbackNames}} and the argument list\r\n   * of the function {{argsValue}} will return the list of callbacks names that can be mocked.\r\n   * This method is usefull for the {{mockCallbacks}} method in order to know which callback functions to mock.\r\n   *\r\n   * @param {Object} argsValue from method call\r\n   * @param {Array} initialCallbackNames from config object\r\n   * @returns {Array} of callbacks to mock\r\n   */\r\n  getCallbacksToMock(argsValue, initialCallbackNames) {\r\n    let triggerEventsValue = argsValue.triggerEvents;\r\n    let result = [];\r\n    let length;\r\n    let value;\r\n    let i;\r\n\r\n    if (triggerEventsValue === true) {\r\n      return initialCallbackNames;\r\n    } else if (angular.isObject(triggerEventsValue)) {\r\n      length = triggerEventsValue.length;\r\n\r\n      for (i = 0; i < length; i += 1) {\r\n        value = triggerEventsValue[i];\r\n        if (initialCallbackNames.indexOf(value) >= 0) result.push(value);\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/mock.js","module.exports = {\"methods_to_delegate\":[\"replay\",\"unsubscribe\",\"revoke\",\"audit\",\"time\",\"channel_group\",\"channel_group_list_groups\",\"channel_group_list_namespaces\",\"channel_group_remove_namespace\",\"channel_group_cloak\",\"get_subscribed_channels\",\"set_uuid\",\"get_uuid\",\"auth\",\"set_cipher_key\",\"get_cipher_key\",\"raw_encrypt\",\"raw_decrypt\",\"set_heartbeat\",\"get_heartbeat\",\"set_heartbeat_interval\",\"get_heartbeat_interval\"],\"methods_to_wrap\":[\"here_now\",\"history\",\"publish\",\"fire\",\"here_now\",\"where_now\",\"state\",\"grant\",\"revoke\",\"channel_group_add_channel\",\"channel_group_list_channels\",\"channel_group_remove_channel\",\"channel_group_remove_group\",\"mobile_gw_provision\"],\"subscribe_callbacks_to_wrap\":[\"callback\",\"connect\",\"reconnect\",\"disconnect\",\"error\",\"idle\",\"presence\"],\"common_callbacks_to_wrap\":[\"callback\",\"error\"]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/v3/config.pubnub-v3.json\n// module id = 8\n// module chunks = 0","/* global angular PubNub */\r\n/* eslint no-param-reassign: 0 */\r\n\r\nlet Wrapper = require('../wrapper.js');\r\nlet MockV4 = require('./mock_v4.js');\r\nlet SubscribeEventsBroadcaster = require('./subscribe_events_broadcaster.js');\r\nconst configPubNubV4 = require('./config.pubnub-v4.json');\r\n\r\n\r\nmodule.exports = class extends Wrapper {\r\n\r\n  constructor(label, service, $rootScope) {\r\n    super(label, service, $rootScope, configPubNubV4);\r\n    this.mockingInstance = new MockV4(label, service, $rootScope);\r\n    this.subscribeEventsBroadcaster = new SubscribeEventsBroadcaster(label, service, $rootScope, this);\r\n  }\r\n\r\n  init(initConfig) {\r\n    this.pubnubInstance = new PubNub(initConfig);\r\n  }\r\n\r\n  subscribe(args) {\r\n    // Events to trigger [message, presence, status]\r\n    let eventsToBroadcast = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.subscribe_listener_events_to_broadcast);\r\n    this.subscribeEventsBroadcaster.enableEventsBroadcast(eventsToBroadcast, args);\r\n    this.getOriginalInstance().subscribe(args);\r\n  }\r\n\r\n  /**\r\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\r\n  **/\r\n  wrapMethod(methodName, methodGroup) {\r\n    if (methodGroup !== undefined) {\r\n      this[methodGroup][methodName] = (args, callbackFunction) => {\r\n        if (angular.isObject(args)) {\r\n          let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.common_callbacks_to_wrap);\r\n          // Mock the callback to trigger events\r\n          if (callbacks.length > 0) {\r\n            let eventName = `${methodGroup}.${methodName}`;\r\n            callbackFunction = this.mockingInstance.generateMockedVersionOfCallback(callbackFunction, 'callback', eventName, this.getLabel());\r\n          }\r\n        }\r\n        return this.getOriginalInstance()[methodGroup][methodName](args, callbackFunction);\r\n      };\r\n    } else {\r\n      this[methodName] = (args, callbackFunction) => {\r\n        if (angular.isObject(args)) {\r\n          let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.common_callbacks_to_wrap);\r\n          // Mock the callback to trigger events\r\n          if (callbacks.length > 0) {\r\n            callbackFunction = this.mockingInstance.generateMockedVersionOfCallback(callbackFunction, 'callback', methodName, this.getLabel());\r\n          }\r\n        }\r\n        return this.getOriginalInstance()[methodName](args, callbackFunction);\r\n      };\r\n    }\r\n  }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/wrapper_pubnub_v4.js","/* global angular */\r\nlet Mock = require('../mock.js');\r\n\r\nmodule.exports = class extends Mock {\r\n\r\n  /**\r\n   * Returns a mocked version of the given callback broadcasting the callback through\r\n   * the AngularJS event broadcasting mechanism.\r\n   *\r\n   * @param {function} originalCallback\r\n   * @param {string} callbackName\r\n   * @param {string} methodName\r\n   * @param {string} instanceName\r\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\r\n   */\r\n\r\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName) {\r\n    let $rootScope = this.$rootScope;\r\n    let service = this.service;\r\n\r\n    return function () {\r\n      // Broadcast through the generic event name\r\n      $rootScope.$broadcast.bind(...[$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\r\n                                    .concat(Array.prototype.slice.call(arguments))\r\n                                 )();\r\n\r\n      // Call the original callback\r\n      if (callbackName && angular.isFunction(originalCallback)) {\r\n        originalCallback(...arguments);\r\n      }\r\n    };\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/mock_v4.js","/* global angular */\r\n/* eslint prefer-spread: 0 */\r\n\r\nmodule.exports = class {\r\n\r\n  constructor(label, service, $rootScope, wrapper) {\r\n    this.wrapper = wrapper;\r\n    this.label = label;\r\n    this.$rootScope = $rootScope;\r\n    this.service = service;\r\n    this.broadcastStatus = false;\r\n    this.broadcastedChannels = {};\r\n    this.broadcastedPresenceChannels = {};\r\n    this.subscribeListener = null;\r\n  }\r\n\r\n  initializeSubscribeListener() {\r\n    let $rootScope = this.$rootScope;\r\n    let service = this.service;\r\n    let self = this;\r\n    this.subscribeListener = this.service.getInstance(this.label).addListener({\r\n      message(m) {\r\n        if ((m.subscription && self.broadcastedChannels[m.subscription]) ||\r\n             (m.channel && self.broadcastedChannels[m.channel])) {\r\n          $rootScope.$broadcast.bind.apply(\r\n                   $rootScope.$broadcast,\r\n                   [$rootScope, service.getMessageEventNameFor(m.subscribedChannel, self.label)]\r\n                     .concat(Array.prototype.slice.call(arguments))\r\n                 )();\r\n        }\r\n      },\r\n      presence(m) {\r\n        let presenceChannel = null;\r\n        // If from channel group\r\n        if (m.subscription !== null && self.broadcastedPresenceChannels[m.subscription]) {\r\n          presenceChannel = m.subscription;\r\n        } else if (m.channel !== null && self.broadcastedPresenceChannels[m.channel]) {\r\n          presenceChannel = m.channel;\r\n        }\r\n\r\n        if (presenceChannel !== null) {\r\n          $rootScope.$broadcast.bind.apply(\r\n                   $rootScope.$broadcast,\r\n                   [$rootScope, service.getPresenceEventNameFor(presenceChannel, self.label)]\r\n                     .concat(Array.prototype.slice.call(arguments))\r\n                 )();\r\n        }\r\n      },\r\n      status() {\r\n        if (self.broadcastStatus) {\r\n          let eventName = self.service.getEventNameFor('subscribe', 'status', self.label);\r\n          self.$rootScope.$broadcast.bind.apply(\r\n               self.$rootScope.$broadcast,\r\n               [self.$rootScope, eventName]\r\n                 .concat(Array.prototype.slice.call(arguments))\r\n             )();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  enableEventsBroadcast(eventsToBroadcast, args) {\r\n    let triggers = [];\r\n    if (!args.triggerEvents) {\r\n      return false;\r\n    } else if (args.triggerEvents === true) {\r\n      triggers = ['status', 'message', 'presence'];\r\n    } else {\r\n      triggers = args.triggerEvents;\r\n    }\r\n\r\n    eventsToBroadcast.forEach((eventToBroadcast) => {\r\n      if (eventToBroadcast === 'status' && triggers.includes('status')) {\r\n        this.broadcastStatus = true;\r\n      }\r\n      if (eventToBroadcast === 'message' && triggers.includes('message')) {\r\n        // Adds any message channel which are not presence channels\r\n        if (args.channels && args.channels.length > 0) {\r\n          args.channels.forEach((channel) => {\r\n            if (channel.slice(-7) !== '-pnpres') {\r\n              this.broadcastedChannels[channel] = true;\r\n            }\r\n          });\r\n        }\r\n        // Adds any message channel group which are not presence channels\r\n        if (args.channelGroups && args.channelGroups.length > 0) {\r\n          args.channelGroups.forEach((channelGroup) => {\r\n            if (channelGroup.slice(-7) !== '-pnpres') {\r\n              this.broadcastedChannels[channelGroup] = true;\r\n            }\r\n          });\r\n        }\r\n      }\r\n      if (eventToBroadcast === 'presence' && triggers.includes('presence')) {\r\n        // Adds the presence channels of the current channels\r\n        if (args.withPresence) {\r\n          if (args.channels && args.channels.length > 0) {\r\n            args.channels.forEach(channel => (this.broadcastedPresenceChannels[channel] = true));\r\n          }\r\n          if (args.channelGroups && args.channelGroups) {\r\n            args.channelGroups.forEach(channelGroup => (this.broadcastedPresenceChannels[channelGroup] = true));\r\n          }\r\n        // Add the presence channels that have been subscribed directely\r\n        } else {\r\n          if (args.channels && args.channels.length > 0) {\r\n            args.channels.forEach((channel) => {\r\n              if (channel.slice(-7) === '-pnpres') {\r\n                this.broadcastedPresenceChannels[channel.slice(0, -7)] = true;\r\n              }\r\n            });\r\n          }\r\n          if (args.channelGroups && args.channelGroups) {\r\n            args.channelGroups.forEach((channelGroup) => {\r\n              if (channelGroup.slice(-7) === '-pnpres') {\r\n                this.broadcastedPresenceChannels[channelGroup.slice(0, -7)] = true;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (this.subscribeListener === null) {\r\n      this.initializeSubscribeListener();\r\n    }\r\n\r\n    return true;\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/subscribe_events_broadcaster.js","module.exports = {\"methods_to_delegate\":[\"setUUID\",\"getUUID\",\"setAuthKey\",\"addListener\",\"removeListener\",\"unsubscribe\",\"unsubscribeAll\",\"time\",\"stop\",\"encrypt\",\"reconnect\",\"decrypt\",\"setFilterExpression\",\"setHeartbeatInterval\"],\"methods_to_wrap\":[\"publish\",\"fire\",\"deleteMessages\",\"fetchMessages\",\"hereNow\",\"whereNow\",\"setState\",\"getState\",\"grant\",\"history\",{\"push\":[\"addChannels\",\"deleteDevice\",\"listChannels\",\"removeChannels\"]},{\"channelGroups\":[\"addChannels\",\"deleteGroup\",\"listChannels\",\"listGroups\",\"removeChannels\"]}],\"common_callbacks_to_wrap\":[\"callback\"],\"subscribe_listener_events_to_broadcast\":[\"message\",\"presence\",\"status\"]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/v4/config.pubnub-v4.json\n// module id = 12\n// module chunks = 0","const pubnubConfig = require('../config.common.json');\r\n/* global angular */\r\nangular.module('pubnub.angular.service').factory('$pubnubChannel', ['$rootScope', 'Pubnub', '$q', function ($rootScope, Pubnub, $q) {\r\n  /**\r\n  * Constructor\r\n  * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\r\n  * Optionnal parameters available to pass in the options hash:\r\n  * {\r\n  *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\r\n  *    autoload: 50,                // The number of messages we want to autoload from history, default: none\r\n  *    autosubscribe: true,         // Automatically subscribe to the channel, default: true\r\n  *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events, default: false\r\n  *    autostore: true              // Automatically store the messages received, default: true\r\n  *\r\n  * }\r\n  * @param {String} channel\r\n  * @param {Hash} config\r\n  * @returns {Array}\r\n  * @constructor\r\n  */\r\n  function PubnubChannel(channel, config = {}) {\r\n        // Instanciate the PubnubChannel and return it\r\n    if (!(this instanceof PubnubChannel)) {\r\n      return new PubnubChannel(channel, config);\r\n    }\r\n\r\n    if (!channel) {\r\n      throw new Error('The channel name is required');\r\n    }\r\n        // autosubscribe\r\n    if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\r\n      throw new Error('The autosubscribe parameter should be a boolean');\r\n    }\r\n        // presence\r\n    if (config.presence && !(typeof config.presence === 'boolean')) {\r\n      throw new Error('The presence parameter should be a boolean');\r\n    }\r\n        // autostore\r\n    if (config.autostore && !(typeof config.autostore === 'boolean')) {\r\n      throw new Error('The autostore parameter should be a boolean');\r\n    }\r\n\r\n    let self = this;\r\n    // The channel we get data from\r\n    this._channel = channel;\r\n    // List that will store the messages received from the channel\r\n    this.$messages = [];\r\n    // Timetoken of the first message of the list\r\n    // usefull for knowing from where to fetch the list history from\r\n    this._timeTokenFirstMessage = null;\r\n    // Indicates if all the messages have been fetched from PubNub history\r\n    this._messagesAllFetched = false;\r\n    // PubNub Instance that will be used by this PubNub channel\r\n    this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\r\n    // Number of messages (between 0 and 100) to autoload in this array calling PubNub history\r\n    this._autoload = config.autoload == null ? 0 : config.autoload;\r\n    // Subscribe and trigger the presence events\r\n    this._presence = config.presence == null ? false : config.presence;\r\n    // Indicates if it should automatically subscribe to the PubNub channel, default: true\r\n    this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\r\n    // Indicates if it should store automatically the messages received from PubNub\r\n    this._autostore = config.autostore == null ? true : config.autostore;\r\n\r\n    // Bind the public methods to make them available on the array.\r\n    this.$$getPublicMethods((fn, key) => {\r\n      self.$messages[key] = fn.bind(self);\r\n    });\r\n\r\n    // The handler that allow to stop listening to new messages\r\n    this._unsubscribeHandler = null;\r\n\r\n    // Autoload the messages\r\n    if (this._autoload !== 0) {\r\n      this.$load(this._autoload);\r\n    }\r\n\r\n    let eventsToTrigger = null;\r\n\r\n    if (Pubnub.getPubNubVersion() === '3') {\r\n      eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\r\n    } else {\r\n      eventsToTrigger = ['status', 'message'];\r\n    }\r\n\r\n    // Trigger the presence event?\r\n    if (this._presence) {\r\n      eventsToTrigger.push('presence');\r\n    }\r\n\r\n    // Automatically subscribe to the channel\r\n    if (this._autosubscribe) {\r\n      // Automatically subscribe to the channel\r\n      let args = { triggerEvents: eventsToTrigger };\r\n      if (Pubnub.getPubNubVersion() === '3') {\r\n        args.channel = this._channel;\r\n        args.noheresync = true;\r\n      } else {\r\n        args.channels = [this._channel];\r\n        if (this._presence) {\r\n          args.withPresence = true;\r\n        }\r\n      }\r\n\r\n      this._pubnubInstance.subscribe(args);\r\n    }\r\n\r\n    // Automatically store the messages\r\n    if (this._autostore) {\r\n      let eventName = Pubnub.getMessageEventNameFor(self._channel, this._pubnubInstance.label);\r\n      this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\r\n    }\r\n\r\n    return this.$messages;\r\n  }\r\n\r\n  PubnubChannel.prototype = {\r\n    /**\r\n    *   Fetch and load the previous messages in the $messages array\r\n    *   @param {Integer} numberOfMessages : number of messages we want to load.\r\n    *   @returns {Promise} messages loaded or error\r\n    */\r\n    $load(numberOfMessages) {\r\n      if (!(numberOfMessages > 0 && numberOfMessages <= 100)) {\r\n        throw new Error('The number of messages to load should be a number between 0 and 100');\r\n      }\r\n\r\n      let self = this;\r\n      let deferred = $q.defer();\r\n\r\n      let args = {\r\n        channel: self._channel,\r\n        count: numberOfMessages,\r\n        reverse: false\r\n      };\r\n\r\n      let callback = null;\r\n\r\n      if (Pubnub.getPubNubVersion() === '3') {\r\n        args.callback = function (m) {\r\n          // Update the timetoken of the first message\r\n          self._timeTokenFirstMessage = m[1];\r\n\r\n          self.$$storeBatch(m[0]);\r\n\r\n          // Updates the indicator that all messages have been fetched.\r\n          if (m[0].length < numberOfMessages) {\r\n            self._messagesAllFetched = true;\r\n          }\r\n\r\n          deferred.resolve(m);\r\n          $rootScope.$digest();\r\n        };\r\n        args.error = function (err) {\r\n          deferred.reject(err);\r\n        };\r\n      } else {\r\n        callback = function (status, response) {\r\n          if (status.error) {\r\n            deferred.reject(response);\r\n          } else {\r\n            // Update the timetoken of the first message\r\n            self._timeTokenFirstMessage = response.startTimeToken;\r\n\r\n            self.$$storeBatch(response.messages.map(item => item.entry));\r\n\r\n            // Updates the indicator that all messages have been fetched.\r\n            if (response.messages.length < numberOfMessages) {\r\n              self._messagesAllFetched = true;\r\n            }\r\n\r\n            deferred.resolve(response);\r\n            $rootScope.$digest();\r\n          }\r\n        };\r\n      }\r\n\r\n      // If there is already messages in the array and consequently a first message timetoken\r\n      if (self._timeTokenFirstMessage) {\r\n        args.start = self._timeTokenFirstMessage;\r\n      }\r\n\r\n      self._pubnubInstance.history(args, callback);\r\n      return deferred.promise;\r\n    },\r\n\r\n    /**\r\n    * Publish a message in the channel\r\n    * @param {Hash} message : message we want to send\r\n    * @returns {Promise} messages loaded or error\r\n    */\r\n    $publish(_message) {\r\n      let self = this;\r\n      let deferred = $q.defer();\r\n      let options = {\r\n        channel: self._channel,\r\n        message: _message\r\n      };\r\n\r\n      let callback = null;\r\n\r\n      if (Pubnub.getPubNubVersion() === '3') {\r\n        options.callback = (m) => { deferred.resolve(m); };\r\n        options.error = (err) => { deferred.reject(err); };\r\n      } else {\r\n        callback = (status, response) => {\r\n          if (status.error) {\r\n            deferred.reject(response);\r\n          } else {\r\n            deferred.resolve(response);\r\n          }\r\n        };\r\n      }\r\n\r\n      self._pubnubInstance.publish(options, callback);\r\n      return deferred.promise;\r\n    },\r\n\r\n    /**\r\n    * Return the Pubnub instance associated to this PubNub Channel\r\n    * @returns {Pubnub} the Pubnub instance\r\n    */\r\n    $pubnubInstance() {\r\n      return this._pubnubInstance;\r\n    },\r\n\r\n    /**\r\n    * Return the channel name on which this PubnubChannel\r\n    * @returns {String} the channel name\r\n    */\r\n    $channel() {\r\n      return this._channel;\r\n    },\r\n\r\n    /**\r\n    * Indicates if all the messages have been fetched\r\n    * @returns {Boolean} all the messages have been loaded\r\n    */\r\n    $allLoaded() {\r\n      return this._messagesAllFetched;\r\n    },\r\n\r\n    /**\r\n    * Inform the object to not receive the events anymore\r\n    * and and clears memory being used by this array\r\n    */\r\n    $destroy() {\r\n      if (this._unsubscribeHandler) {\r\n        this._unsubscribeHandler();\r\n      }\r\n      this.$messages.length = 0;\r\n    },\r\n\r\n    /**\r\n    * Called when an new message has been received in the channel from the PubNub network\r\n    * @protected\r\n    */\r\n    $$newMessage(ngEvent, m) {\r\n      if (Pubnub.getPubNubVersion() === '3') {\r\n        this.$$store(m);\r\n      } else {\r\n        this.$$store(m.message);\r\n      }\r\n      $rootScope.$digest();\r\n    },\r\n\r\n    /**\r\n    * Function called to store a message in the messages array.\r\n    * @protected\r\n    */\r\n    $$store(message) {\r\n      this.$messages.push(message);\r\n    },\r\n\r\n    /**\r\n    * Function called in order to store a batch of message in the messages array.\r\n    * @protected\r\n    */\r\n    $$storeBatch(messages) {\r\n      // We add the messages in the array\r\n      if (this.$messages.length === 0) {\r\n        angular.extend(this.$messages, messages);\r\n      } else {\r\n        Array.prototype.unshift.apply(this.$messages, messages);\r\n      }\r\n    },\r\n\r\n    /**\r\n    * These methods allow the PubNub channel to extend his array with his Public methods\r\n    */\r\n\r\n    // Get the list of the public methods of the PubnubChannel (prefixed by $)\r\n    // Return the list of the public methods of the prototype\r\n    $$getPublicMethods(iterator, context) {\r\n      this.$$getPrototypeMethods((m, k) => {\r\n        if (typeof (m) === 'function' && k.charAt(0) !== '_') {\r\n          iterator.call(context, m, k);\r\n        }\r\n      });\r\n    },\r\n\r\n    // Get the list of the methods of the PubnubChannel\r\n    // Return the list of the methods of the prototype\r\n    $$getPrototypeMethods(iterator, context) {\r\n      let methods = {};\r\n      let objProto = Object.getPrototypeOf({});\r\n      let proto = angular.isFunction(this) && angular.isObject(this.prototype) ?\r\n          this.prototype : Object.getPrototypeOf(this);\r\n      while (proto && proto !== objProto) {\r\n        Object.keys(proto).forEach((key) => {\r\n          if ({}.hasOwnProperty.call(proto, key) && !{}.hasOwnProperty.call(methods, key)) {\r\n            methods[key] = true;\r\n            iterator.call(context, proto[key], key, proto);\r\n          }\r\n        });\r\n        proto = Object.getPrototypeOf(proto);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n  * This method allows a PubnubChannel to be inherited\r\n  * The methods passed into this function will be added onto the array's prototype.\r\n  /* They can override existing methods as well.\r\n\r\n  * @param {Object} methods a list of functions to add onto the prototype\r\n  * @returns {Function} the extended pubnubChannel object\r\n  * @static\r\n  */\r\n  PubnubChannel.$extend = function (methods) {\r\n    if (!angular.isObject(methods)) {\r\n      throw new Error('The methods parameter should be an object');\r\n    }\r\n\r\n    let ExtendedPubnubChannel = function (channel, config) {\r\n      if (!(this instanceof PubnubChannel)) {\r\n        return new ExtendedPubnubChannel(channel, config);\r\n      }\r\n      PubnubChannel.apply(this, arguments);\r\n      return this.$messages;\r\n    };\r\n\r\n    ExtendedPubnubChannel.prototype = Object.create(PubnubChannel.prototype);\r\n    angular.extend(ExtendedPubnubChannel.prototype, methods);\r\n\r\n    return ExtendedPubnubChannel;\r\n  };\r\n\r\n  return PubnubChannel;\r\n}]);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub_channel.js","/* @flow */\r\n\r\nconst pubnubConfig = require('../config.common.json');\r\n/* global angular */\r\nangular.module('pubnub.angular.service')\r\n    .factory('$pubnubChannelGroup', ['$rootScope', '$q', 'Pubnub', '$pubnubChannel',\r\n      function ($rootScope, $q, Pubnub, $pubnubChannel) {\r\n      /**\r\n       * Constructor\r\n       * The constructor is called through this way $pubnubChannelGroup(channelGroup, options) and shoudld rarely called directely\r\n       * This object is a container of channels\r\n       * You can access to one of a channel by calling the #getChannel(channel) method\r\n       * Optionnal parameters available to pass in the config hash:\r\n       * {\r\n       *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\r\n       *    autosubscribe: true,         // Automatically subscribe to the channel group, default: true\r\n       *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events for the channel group, default: false\r\n       *    channelExtension: {foo: function(){ return \"bar\"}} // Define additionnal functions or override some for the channel instanciated\r\n       *\r\n       * }\r\n       * @param {String} channelGroup | {Hash} config\r\n       * @returns the channel group itself;\r\n       * @constructor\r\n       */\r\n        function PubnubChannelGroup(channelGroup, _config) {\r\n              // Instanciate the PubnubChannelGroup and return it\r\n          if (!(this instanceof PubnubChannelGroup)) {\r\n            return new PubnubChannelGroup(channelGroup, _config);\r\n          }\r\n\r\n          let self = this;\r\n          let config = _config || {};\r\n\r\n          if (!channelGroup) {\r\n            throw new Error('The channel group name is required');\r\n          }\r\n\r\n          // autosubscribe\r\n          if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\r\n            throw new Error('The autosubscribe parameter should be a boolean');\r\n          }\r\n          // presence\r\n          if (config.presence && !(typeof config.presence === 'boolean')) {\r\n            throw new Error('The presence parameter should be a boolean');\r\n          }\r\n\r\n          if (config.channelExtension && !(angular.isObject(config.channelExtension))) {\r\n            throw new Error('The channelExtension should be an object');\r\n          }\r\n\r\n          this._channelGroup = channelGroup;\r\n          // Maintain the list of channel objects\r\n          this.$channels = {};\r\n          // PubNub Instance that will be used by this PubNub channel\r\n          this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\r\n          // Subscribe and trigger the presence events\r\n          this._presence = config.presence == null ? false : config.presence;\r\n          // Indicates if it should automatically subscribe to the PubNub channel, default: true\r\n          this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\r\n          // Extensions for the channel beeing instanciated\r\n          this._extendedChannel = config.channelExtension ? $pubnubChannel.$extend(config.channelExtension) : null;\r\n          // The handler that allow to stop listening to new messages\r\n          this._unsubscribeHandler = null;\r\n\r\n          let eventsToTrigger = null;\r\n          if (Pubnub.getPubNubVersion() === '3') {\r\n            eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\r\n          } else {\r\n            eventsToTrigger = ['status', 'message'];\r\n          }\r\n          // Trigger the presence event?\r\n          if (this._presence) {\r\n            eventsToTrigger.push('presence');\r\n          }\r\n          // Automatically subscribe to the channel\r\n          if (this._autosubscribe) {\r\n            // Automatically subscribe to the channel\r\n            let args = { triggerEvents: eventsToTrigger };\r\n            if (Pubnub.getPubNubVersion() === '3') {\r\n              args.channel_group = this._channelGroup;\r\n            } else {\r\n              args.channelGroups = [this._channelGroup];\r\n            }\r\n            this._pubnubInstance.subscribe(args);\r\n          }\r\n\r\n          // Allow to unsubscribe to the channel group\r\n          let eventName = Pubnub.getMessageEventNameFor(self._channelGroup, self._pubnubInstance.label);\r\n          this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\r\n\r\n          return this;\r\n        }\r\n\r\n        PubnubChannelGroup.prototype = {\r\n          /**\r\n           * Return the channel object specified from the name\r\n           * the message can be from any channel of the channel group\r\n           * @protected\r\n           */\r\n          $channel(channel) {\r\n            if (!angular.isDefined(this.$channels[channel])) {\r\n              let options = {\r\n                instance: this._pubnubInstance.label,\r\n                autosubscribe: false,\r\n                presence: false,\r\n                autostore: true\r\n              };\r\n              let newChannel = this._extendedChannel ? new this._extendedChannel(channel, options) : $pubnubChannel(channel, options);\r\n              this.$channels[channel] = newChannel;\r\n            }\r\n\r\n            return this.$channels[channel];\r\n          },\r\n\r\n          /**\r\n           * Return the Pubnub instance associated to this PubNub Channel Group\r\n           * @returns {Pubnub} the Pubnub instance\r\n           */\r\n          $pubnubInstance() {\r\n            return this._pubnubInstance;\r\n          },\r\n\r\n          /**\r\n           * Return the channel name on which this PubnubChannelGroup is based\r\n           * @returns {String} the channel name\r\n           */\r\n          $channelGroup() {\r\n            return this._channelGroup;\r\n          },\r\n\r\n          /**\r\n           * Inform the object to not receive the events anymore\r\n           * and and clears memory being used by this array\r\n           */\r\n          $destroy() {\r\n            this._unsubscribeHandler();\r\n            Object.keys(this.$channels).forEach((channel) => {\r\n              if ({}.hasOwnProperty.call(this.$channels, channel)) {\r\n                delete this.$channels[channel];\r\n              }\r\n            });\r\n          },\r\n\r\n          /**\r\n           * Called when an new message has been received in the channel from the PubNub network\r\n           * the message can be from any channel of the channel group\r\n           * @protected\r\n           */\r\n          $$newMessage(ngEvent, message, env) {\r\n            let channel = null;\r\n            if (Pubnub.getPubNubVersion() === '3') {\r\n              channel = env[3];\r\n            } else {\r\n              channel = message.channel;\r\n            }\r\n            this.$channel(channel).$$newMessage(ngEvent, message, env);\r\n          }\r\n        };\r\n\r\n        return PubnubChannelGroup;\r\n      }\r\n    ]);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub_channel_group.js"],"sourceRoot":""}